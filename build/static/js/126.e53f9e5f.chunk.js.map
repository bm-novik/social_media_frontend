{"version":3,"file":"static/js/126.e53f9e5f.chunk.js","mappings":"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","sources":["components/media/SuggestedCard.js","components/media/FeedCardContent.js","components/media/mediaCard.js","pages/Feed.page.js","../node_modules/src/observe.ts","../node_modules/src/InView.tsx","../node_modules/src/useInView.tsx"],"sourcesContent":["import Avatar from \"@mui/material/Avatar\";\r\nimport {StyledPinkTextButton} from \"../button/Button.styles\";\r\nimport CardHeader from \"@mui/material/CardHeader\";\r\nimport {useNavigate} from \"react-router-dom\";\r\nimport {useFollowCreateData, useFollowingDeleteData} from \"../../hooks/useProfile.data\";\r\nimport {useQueryClient} from \"react-query\";\r\n\r\nexport const SuggestedCardHeader = ({id, first, last, nickName, image, text}) => {\r\n    const queryClient = useQueryClient()\r\n\r\n    const onSuccess = () => {\r\n        queryClient.invalidateQueries('useTopFive')\r\n        queryClient.invalidateQueries('usePostFeedList')\r\n    }\r\n\r\n    const {mutate} = useFollowCreateData(onSuccess)\r\n\r\n    const navigate = useNavigate()\r\n\r\n    return (\r\n        <CardHeader\r\n            sx={{width: '37ch', underline: \"none\", backgroundColor: 'transparent'}}\r\n            avatar={\r\n                <Avatar\r\n                    sx={{cursor: 'pointer'}}\r\n                    onClick={() => navigate(`/${id}`)}\r\n                    alt={first}\r\n                    src={image}/>\r\n            }\r\n\r\n            action={\r\n                <StyledPinkTextButton style={{paddingTop: '2ch', backgroundColor: 'transparent'}}\r\n                                      onClick={() => text ? navigate(`/${id}`) : mutate({object_id: id})}>\r\n                    {text ? 'Profile' : 'Follow'}\r\n                </StyledPinkTextButton>\r\n            }\r\n\r\n            title={\r\n                <div style={{cursor: 'pointer'}}\r\n                     onClick={() => navigate(`/${id}`)}>{nickName}</div>\r\n            }\r\n\r\n            subheader={\r\n                <div\r\n                    style={{cursor: 'pointer'}}\r\n                    onClick={() => navigate(`/${id}`)}>{first} {last}\r\n                </div>\r\n            }\r\n        />\r\n    )\r\n}\r\n","import Typography from \"@mui/material/Typography\";\r\nimport {StyledCommentModalButton, StyledLikeModalButton} from \"../button/Button.styles\";\r\n// import {Link} from \"@mui/material\";\r\nimport {Link} from \"react-router-dom\";\r\nimport CardContent from \"@mui/material/CardContent\";\r\nimport {useState} from \"react\";\r\nimport {PostDetailsModal} from \"../modalPages/PostDetails.modal.page\";\r\nimport {timeFromPost} from \"../../utils/commonFunk\";\r\n\r\nexport const FeedCardContent = ({post}) => {\r\n    const space = ' '\r\n    const [clickedPost, setClickedPost] = useState(null)\r\n    const [postModalOpen, setPostModalOpen] = useState(false)\r\n\r\n    const handlePostModalClick = ({post}) => {\r\n        setClickedPost(post?.id)\r\n        setPostModalOpen(!postModalOpen)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <PostDetailsModal\r\n                open={postModalOpen}\r\n                handleModalClick={handlePostModalClick}\r\n                post={clickedPost}\r\n            />\r\n            <CardContent sx={{paddingTop: '0.5ch', paddingBottom: 2}}>\r\n\r\n                {/*Like count LikeModal*/}\r\n                <Typography variant=\"body2\" color=\"text.secondary\" sx={{fontFamily: 'Quicksand', fontSize: '1.85ch',}}>\r\n                    <StyledLikeModalButton\r\n                        variant=\"text\"\r\n                        color='inherit'\r\n                        style={{background: 'transparent', paddingLeft: '0px'}}\r\n                    >\r\n                        {post.like_count} likes\r\n                    </StyledLikeModalButton>\r\n                </Typography>\r\n\r\n                {/*Post content -> Navigate to profile*/}\r\n                <Typography variant=\"body2\" sx={{fontFamily: 'Quicksand', fontSize: '1.85ch', color: \"black\"}}>\r\n                    <Link to={`/${post.author.id}`}\r\n                          onClick={() => console.log(`${post.author.id}`)}\r\n                          style={{\r\n                              textDecoration: 'none',\r\n                              cursor: 'pointer',\r\n                              color: 'inherit',\r\n                              fontWeight: 600\r\n                          }}>\r\n                        {/*TODO nickName*/}\r\n                        {post.author.profile.first_name}{space}\r\n                    </Link>\r\n                    {post.content}\r\n                </Typography>\r\n\r\n                {/*Comments count -> Open PostDetailModal*/}\r\n                <Typography variant=\"body2\" color=\"text.secondary\" sx={{}}>\r\n                    <StyledCommentModalButton\r\n                        variant=\"text\"\r\n                        color='inherit'\r\n                        style={{background: 'transparent'}}\r\n                        onClick={() => handlePostModalClick({post})}\r\n                    >\r\n                        View all {post.comment_count} comments\r\n                    </StyledCommentModalButton>\r\n                </Typography>\r\n\r\n                {/* Date publish -> No action*/}\r\n                <Typography variant=\"body2\" sx={{fontFamily: 'Quicksand', fontSize: '1.3ch', color: \"MySecondary\",}}>\r\n                    {timeFromPost(post.date_created)}\r\n                </Typography>\r\n\r\n            </CardContent>\r\n        </>\r\n    );\r\n};\r\n","import Card from '@mui/material/Card';\r\nimport CardMedia from '@mui/material/CardMedia';\r\nimport {PostHeader} from \"../header/postMedia/PostHeader\";\r\nimport {OneLineCommentForm} from \"../form/OneLineCommentForm\";\r\nimport {FeedCardContent} from \"./FeedCardContent\";\r\nimport {PostCardAction} from \"./PostCardAction\";\r\n\r\n\r\nexport const Post = ({ post }) => {\r\n\r\n    return (\r\n        <Card sx={{maxWidth: '77ch', mb: 5, marginRight: '10ch'}}>\r\n            <PostHeader underline=\"none\" author={post.author}/>\r\n            <CardMedia\r\n                onClick={() => console.log('post detail modal')}\r\n                component=\"img\"\r\n                height=\"614\"\r\n                width=\"614\"\r\n                image={post.image}\r\n                alt=\"\"/>\r\n            <PostCardAction post={post}/>\r\n            <FeedCardContent post={post} />\r\n           <OneLineCommentForm post={ post }/>\r\n        </Card>\r\n    )\r\n}\r\n","// React\r\nimport { Fragment, useEffect } from \"react\";\r\nimport { useRecoilValue } from \"recoil\";\r\n\r\n// MUI\r\nimport { Stack } from \"@mui/material\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Card from \"@mui/material/Card\";\r\n\r\n// 3d party\r\nimport {  useInView  } from 'react-intersection-observer'\r\n\r\n// React-Query hooks\r\nimport { usePostFeedListData } from \"../hooks/UseDataControl\";\r\n\r\n// Recoil global state\r\nimport { AuthenticatedAtom } from \"../recoil/atom/AtomStore\";\r\n\r\n// Components\r\nimport { StyledColumnDividedFeedBox, StyledPostColumnFeedBox } from \"../components/boxs/Box.styles\";\r\nimport { StyledSecondaryMenuTypography } from \"../components/typography/Typography.styles\";\r\nimport { useTopFiveData } from \"../hooks/useFeedAndExplore.data\";\r\nimport { SuggestedCardHeader } from \"../components/media/SuggestedCard\";\r\nimport { WindowLoader } from \"../components/layout/icons/Loader\";\r\nimport { Post } from \"../components/media/mediaCard\";\r\n\r\n\r\n\r\nconst Feed = () => {\r\n    // State management\r\n    const { ref, inView } = useInView()\r\n    const user = useRecoilValue(AuthenticatedAtom)\r\n\r\n    // React-Query logic\r\n    useEffect(() => {\r\n        if (inView) fetchNextPage()\r\n    }, [inView])\r\n\r\n    const getNextPageParam = (_lastPage, pages) => pages[(pages.length) - 1].data.next ?? undefined\r\n\r\n    const {data: SuggestedProfiles} = useTopFiveData()\r\n    const {data, fetchNextPage, isLoading, isFetching, isFetchingNextPage, hasNextPage}\r\n        = usePostFeedListData(getNextPageParam)\r\n\r\n\r\n    return (\r\n        <>\r\n            {(isLoading || isFetching) && <WindowLoader/>}\r\n            <StyledColumnDividedFeedBox>\r\n\r\n                <StyledPostColumnFeedBox>\r\n                        {data?.pages.map((group, i) => {\r\n                            return (\r\n                                <Fragment key={i}>\r\n                                    {group?.data?.results.map(post => (\r\n                                        <Post sx={{'& .MuiTypography-root': {fontFamily: 'QuickSand'}}} key={post.id}\r\n                                              post={post}/>\r\n                                    ))}\r\n                                </Fragment>\r\n                            )\r\n                        })}\r\n                    <div>\r\n                        <Button\r\n                            sx={{display: 'none'}}\r\n                            ref={ref}\r\n                            onClick={() => fetchNextPage()}\r\n                            disabled={!hasNextPage || isFetchingNextPage}\r\n                         />\r\n                    </div>\r\n                </StyledPostColumnFeedBox>\r\n                <Card sx={{\r\n                    display: 'flex',\r\n                    backgroundColor: 'transparent',\r\n                    top: '6.25ch',\r\n                    boxShadow: 'none',\r\n                    position: 'sticky'\r\n                }}>\r\n                    <Stack sx={{position: 'fixed'}}>\r\n\r\n                        <SuggestedCardHeader id={user.profileId} first={user.firstName} last={user.lastName}\r\n                                             nickName={user.nickname} image={user.image} text={true}/>\r\n\r\n                        <StyledSecondaryMenuTypography sx={{paddingLeft: '2.25ch'}}>\r\n                            Suggestions For You\r\n                        </StyledSecondaryMenuTypography>\r\n\r\n                        {SuggestedProfiles?.data.map(profile => (\r\n                            <SuggestedCardHeader\r\n                                key={`profile${profile?.profile?.id}`}\r\n                                id={profile?.profile?.id}\r\n                                first={profile?.profile?.first_name}\r\n                                nickName={profile?.username}\r\n                                last={profile?.profile?.last_name} image={profile?.profile?.profile_pic}\r\n                                text={false}/>\r\n                        ))}\r\n                    </Stack>\r\n                </Card>\r\n\r\n            </StyledColumnDividedFeedBox>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Feed","import type { ObserverInstanceCallback } from './index';\n\nconst observerMap = new Map<\n  string,\n  {\n    id: string;\n    observer: IntersectionObserver;\n    elements: Map<Element, Array<ObserverInstanceCallback>>;\n  }\n>();\n\nconst RootIds: WeakMap<Element | Document, string> = new WeakMap();\nlet rootId = 0;\n\nlet unsupportedValue: boolean | undefined = undefined;\n\n/**\n * What should be the default behavior if the IntersectionObserver is unsupported?\n * Ideally the polyfill has been loaded, you can have the following happen:\n * - `undefined`: Throw an error\n * - `true` or `false`: Set the `inView` value to this regardless of intersection state\n * **/\nexport function defaultFallbackInView(inView: boolean | undefined) {\n  unsupportedValue = inView;\n}\n\n/**\n * Generate a unique ID for the root element\n * @param root\n */\nfunction getRootId(root: IntersectionObserverInit['root']) {\n  if (!root) return '0';\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n\n/**\n * Convert the options to a string Id, based on the values.\n * Ensures we can reuse the same observer when observing elements with the same options.\n * @param options\n */\nexport function optionsToId(options: IntersectionObserverInit) {\n  return Object.keys(options)\n    .sort()\n    .filter((key) => options[key] !== undefined)\n    .map((key) => {\n      return `${key}_${\n        key === 'root' ? getRootId(options.root) : options[key]\n      }`;\n    })\n    .toString();\n}\n\nfunction createObserver(options: IntersectionObserverInit) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  let id = optionsToId(options);\n  let instance = observerMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    const elements = new Map<Element, Array<ObserverInstanceCallback>>();\n    let thresholds: number[] | readonly number[];\n\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        const inView =\n          entry.isIntersecting &&\n          thresholds.some((threshold) => entry.intersectionRatio >= threshold);\n\n        // @ts-ignore support IntersectionObserver v2\n        if (options.trackVisibility && typeof entry.isVisible === 'undefined') {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        elements.get(entry.target)?.forEach((callback) => {\n          callback(inView, entry);\n        });\n      });\n    }, options);\n\n    // Ensure we have a valid thresholds array. If not, use the threshold from the options\n    thresholds =\n      observer.thresholds ||\n      (Array.isArray(options.threshold)\n        ? options.threshold\n        : [options.threshold || 0]);\n\n    instance = {\n      id,\n      observer,\n      elements,\n    };\n\n    observerMap.set(id, instance);\n  }\n\n  return instance;\n}\n\n/**\n * @param element - DOM Element to observe\n * @param callback - Callback function to trigger when intersection status changes\n * @param options - Intersection Observer options\n * @param fallbackInView - Fallback inView value.\n * @return Function - Cleanup function that should be triggered to unregister the observer\n */\nexport function observe(\n  element: Element,\n  callback: ObserverInstanceCallback,\n  options: IntersectionObserverInit = {},\n  fallbackInView = unsupportedValue,\n) {\n  if (\n    typeof window.IntersectionObserver === 'undefined' &&\n    fallbackInView !== undefined\n  ) {\n    const bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio:\n        typeof options.threshold === 'number' ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds,\n    });\n    return () => {\n      // Nothing to cleanup\n    };\n  }\n  // An observer with the same options can be reused, so lets use this fact\n  const { id, observer, elements } = createObserver(options);\n\n  // Register the callback listener for this element\n  let callbacks = elements.get(element) || [];\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      observerMap.delete(id);\n    }\n  };\n}\n","import * as React from 'react';\nimport type { IntersectionObserverProps, PlainChildrenProps } from './index';\nimport { observe } from './observe';\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\nfunction isPlainChildren(\n  props: IntersectionObserverProps | PlainChildrenProps,\n): props is PlainChildrenProps {\n  return typeof props.children !== 'function';\n}\n\n/**\n ## Render props\n\n To use the `<InView>` component, you pass it a function. It will be called\n whenever the state changes, with the new value of `inView`. In addition to the\n `inView` prop, children also receive a `ref` that should be set on the\n containing DOM element. This is the element that the IntersectionObserver will\n monitor.\n\n If you need it, you can also access the\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\n on `entry`, giving you access to all the details about the current intersection\n state.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView>\n {({ inView, ref, entry }) => (\n      <div ref={ref}>\n        <h2>{`Header inside viewport ${inView}.`}</h2>\n      </div>\n    )}\n </InView>\n );\n\n export default Component;\n ```\n\n ## Plain children\n\n You can pass any element to the `<InView />`, and it will handle creating the\n wrapping DOM element. Add a handler to the `onChange` method, and control the\n state in your own component. Any extra props you add to `<InView>` will be\n passed to the HTML element, allowing you set the `className`, `style`, etc.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\n </InView>\n );\n\n export default Component;\n ```\n */\nexport class InView extends React.Component<\n  IntersectionObserverProps | PlainChildrenProps,\n  State\n> {\n  constructor(props: IntersectionObserverProps | PlainChildrenProps) {\n    super(props);\n    this.state = {\n      inView: !!props.initialInView,\n      entry: undefined,\n    };\n  }\n\n  componentDidUpdate(prevProps: IntersectionObserverProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (\n      prevProps.rootMargin !== this.props.rootMargin ||\n      prevProps.root !== this.props.root ||\n      prevProps.threshold !== this.props.threshold ||\n      prevProps.skip !== this.props.skip ||\n      prevProps.trackVisibility !== this.props.trackVisibility ||\n      prevProps.delay !== this.props.delay\n    ) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unobserve();\n    this.node = null;\n  }\n\n  node: Element | null = null;\n  _unobserveCb: (() => void) | null = null;\n\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const {\n      threshold,\n      root,\n      rootMargin,\n      trackVisibility,\n      delay,\n      fallbackInView,\n    } = this.props;\n\n    this._unobserveCb = observe(\n      this.node,\n      this.handleChange,\n      {\n        threshold,\n        root,\n        rootMargin,\n        // @ts-ignore\n        trackVisibility,\n        // @ts-ignore\n        delay,\n      },\n      fallbackInView,\n    );\n  }\n\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n      this._unobserveCb = null;\n    }\n  }\n\n  handleNode = (node?: Element | null) => {\n    if (this.node) {\n      // Clear the old observer, before we start observing a new element\n      this.unobserve();\n\n      if (!node && !this.props.triggerOnce && !this.props.skip) {\n        // Reset the state if we get a new node, and we aren't ignoring updates\n        this.setState({ inView: !!this.props.initialInView, entry: undefined });\n      }\n    }\n\n    this.node = node ? node : null;\n    this.observeNode();\n  };\n\n  handleChange = (inView: boolean, entry: IntersectionObserverEntry) => {\n    if (inView && this.props.triggerOnce) {\n      // If `triggerOnce` is true, we should stop observing the element.\n      this.unobserve();\n    }\n    if (!isPlainChildren(this.props)) {\n      // Store the current State, so we can pass it to the children in the next render update\n      // There's no reason to update the state for plain children, since it's not used in the rendering.\n      this.setState({ inView, entry });\n    }\n    if (this.props.onChange) {\n      // If the user is actively listening for onChange, always trigger it\n      this.props.onChange(inView, entry);\n    }\n  };\n\n  render() {\n    if (!isPlainChildren(this.props)) {\n      const { inView, entry } = this.state;\n      return this.props.children({ inView, entry, ref: this.handleNode });\n    }\n\n    const {\n      children,\n      as,\n      triggerOnce,\n      threshold,\n      root,\n      rootMargin,\n      onChange,\n      skip,\n      trackVisibility,\n      delay,\n      initialInView,\n      fallbackInView,\n      ...props\n    } = this.props;\n\n    return React.createElement(\n      as || 'div',\n      { ref: this.handleNode, ...props },\n      children,\n    );\n  }\n}\n","import * as React from 'react';\nimport type { InViewHookResponse, IntersectionOptions } from './index';\nimport { observe } from './observe';\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\n/**\n * React Hooks make it easy to monitor the `inView` state of your components. Call\n * the `useInView` hook with the (optional) [options](#options) you need. It will\n * return an array containing a `ref`, the `inView` status and the current\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\n * report the status.\n *\n * @example\n * ```jsx\n * import React from 'react';\n * import { useInView } from 'react-intersection-observer';\n *\n * const Component = () => {\n *   const { ref, inView, entry } = useInView({\n *       threshold: 0,\n *   });\n *\n *   return (\n *     <div ref={ref}>\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\n *     </div>\n *   );\n * };\n * ```\n */\nexport function useInView({\n  threshold,\n  delay,\n  trackVisibility,\n  rootMargin,\n  root,\n  triggerOnce,\n  skip,\n  initialInView,\n  fallbackInView,\n  onChange,\n}: IntersectionOptions = {}): InViewHookResponse {\n  const unobserve = React.useRef<Function>();\n  const callback = React.useRef<IntersectionOptions['onChange']>();\n  const [state, setState] = React.useState<State>({\n    inView: !!initialInView,\n  });\n  // Store the onChange callback in a `ref`, so we can access the latest instance inside the `useCallback`.\n  callback.current = onChange;\n\n  const setRef = React.useCallback(\n    (node: Element | null) => {\n      if (unobserve.current !== undefined) {\n        unobserve.current();\n        unobserve.current = undefined;\n      }\n\n      // Skip creating the observer\n      if (skip) return;\n\n      if (node) {\n        unobserve.current = observe(\n          node,\n          (inView, entry) => {\n            setState({ inView, entry });\n            if (callback.current) callback.current(inView, entry);\n\n            if (entry.isIntersecting && triggerOnce && unobserve.current) {\n              // If it should only trigger once, unobserve the element after it's inView\n              unobserve.current();\n              unobserve.current = undefined;\n            }\n          },\n          {\n            root,\n            rootMargin,\n            threshold,\n            // @ts-ignore\n            trackVisibility,\n            // @ts-ignore\n            delay,\n          },\n          fallbackInView,\n        );\n      }\n    },\n    // We break the rule here, because we aren't including the actual `threshold` variable\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      // If the threshold is an array, convert it to a string so it won't change between renders.\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      Array.isArray(threshold) ? threshold.toString() : threshold,\n      root,\n      rootMargin,\n      triggerOnce,\n      skip,\n      trackVisibility,\n      fallbackInView,\n      delay,\n    ],\n  );\n\n  /* eslint-disable-next-line */\n  React.useEffect(() => {\n    if (!unobserve.current && state.entry && !triggerOnce && !skip) {\n      // If we don't have a ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n      // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n      setState({\n        inView: !!initialInView,\n      });\n    }\n  });\n\n  const result = [setRef, state.inView, state.entry] as InViewHookResponse;\n\n  // Support object destructuring, by adding the specific values.\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n\n  return result;\n}\n"],"names":["SuggestedCardHeader","id","first","last","nickName","image","text","queryClient","useQueryClient","mutate","useFollowCreateData","invalidateQueries","navigate","useNavigate","CardHeader","sx","width","underline","backgroundColor","avatar","Avatar","cursor","onClick","alt","src","action","style","paddingTop","object_id","title","subheader","FeedCardContent","post","useState","clickedPost","setClickedPost","postModalOpen","setPostModalOpen","handlePostModalClick","P","open","handleModalClick","CardContent","paddingBottom","Typography","variant","color","fontFamily","fontSize","background","paddingLeft","like_count","to","author","console","log","textDecoration","fontWeight","profile","first_name","content","comment_count","timeFromPost","date_created","Post","Card","maxWidth","mb","marginRight","PostHeader","CardMedia","component","height","PostCardAction","OneLineCommentForm","useInView","ref","inView","user","useRecoilValue","AuthenticatedAtom","useEffect","fetchNextPage","SuggestedProfiles","useTopFiveData","data","usePostFeedListData","_lastPage","pages","length","next","undefined","isLoading","isFetching","isFetchingNextPage","hasNextPage","map","group","i","Fragment","results","Button","display","disabled","top","boxShadow","position","Stack","profileId","firstName","lastName","nickname","username","last_name","profile_pic","observerMap","Map","RootIds","WeakMap","rootId","unsupportedValue","optionsToId","options","Object","keys","sort","filter","key","root","has","set","toString","get","observe","element","callback","fallbackInView","window","IntersectionObserver","bounds","getBoundingClientRect","isIntersecting","target","intersectionRatio","threshold","time","boundingClientRect","intersectionRect","rootBounds","createObserver","instance","thresholds","elements","observer","entries","forEach","entry","some","trackVisibility","isVisible","Array","isArray","callbacks","push","splice","indexOf","unobserve","size","disconnect","isPlainChildren","props","children","React","_temp","delay","rootMargin","triggerOnce","skip","initialInView","onChange","state","setState","current","setRef","node","result"],"sourceRoot":""}