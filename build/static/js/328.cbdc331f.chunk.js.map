{"version":3,"file":"static/js/328.cbdc331f.chunk.js","mappings":"qQAuBA,SAASA,EAAOC,EAAOC,GAA2B,IAArBC,EAAoB,uDAAb,EAAGC,EAAU,uDAAH,EAC1C,MACI,CACIC,IAAI,GAAD,OAAKJ,EAAL,cAAgBC,EAAOE,EAAvB,cAAiCF,EAAOC,EAAxC,yBACHG,OAAO,GAAD,OAAKL,EAAL,cAAgBC,EAAOE,EAAvB,cAAiCF,EAAOC,EAAxC,mCA8FlB,UAzFgB,WAEZ,OAAsBI,EAAAA,EAAAA,MAAfC,EAAP,EAAOA,IAAKC,EAAZ,EAAYA,OACZ,GAAsCC,EAAAA,EAAAA,UAAS,MAA/C,eAAOC,EAAP,KAAoBC,EAApB,KACA,GAA0CF,EAAAA,EAAAA,WAAS,GAAnD,eAAOG,EAAP,KAAsBC,EAAtB,MAIAC,EAAAA,EAAAA,YAAU,WACFN,GAAQO,MACb,CAACP,IAEJ,IAEA,GACMQ,EAAAA,EAAAA,KAHmB,SAACC,EAAWC,GAAZ,uBAAsBA,EAAOA,EAAMC,OAAU,GAAGC,KAAKC,YAArD,aAA6DC,KAE/EF,EAAP,EAAOA,KAAML,EAAb,EAAaA,cAAeQ,EAA5B,EAA4BA,UAAWC,EAAvC,EAAuCA,WAAYC,EAAnD,EAAmDA,mBAAoBC,EAAvE,EAAuEA,YAGjEC,EAAuB,SAAC,GAAY,IAAXC,EAAU,EAAVA,KAC3BjB,EAAc,OAACiB,QAAD,IAACA,OAAD,EAACA,EAAMC,IACrBhB,GAAkBD,IAGtB,OACI,iCACMW,GAAaC,GAAcC,KAAuB,SAAC,IAAD,KACpD,UAAC,IAAD,CAAKK,GAAI,CAACC,QAAS,OAAQC,cAAe,SAAUC,OAAQ,OAAQC,MAAO,QAASC,GAAI,IAAxF,WAEI,SAAC,EAAAC,EAAD,CACIC,KAAMzB,EACN0B,iBAAkBX,EAClBC,KAAMlB,IALd,OAQKU,QARL,IAQKA,OARL,EAQKA,EAAMF,MAAMqB,KAAI,SAACC,EAAOC,GAAW,IAAD,EAC/B,OACI,SAAC,EAAAC,SAAD,WACI,SAAC,IAAD,CACIZ,GAAI,CAACI,MAAO,OAAQS,UAAW,SAC/BxC,KAAM,EACNyC,IAAK,GACLC,QAAQ,UAJZ,gBAMKL,QANL,IAMKA,GANL,UAMKA,EAAOpB,YANZ,aAMK,EAAa0B,QAAQP,KAAI,SAACX,EAAMmB,GAAP,OACtB,UAAC,KAAD,CAEI5C,KAAO4C,EAvC1B,KAuC2C,EAAK,EAAI,EACjC7C,KAAO6C,EAxC1B,KAwC2C,EAAK,EAAI,EACjCC,QAAS,WACLrB,EAAqB,CAACC,KAAAA,KAL9B,WAQI,kCACQ7B,EAAM,OAAC6B,QAAD,IAACA,OAAD,EAACA,EAAM5B,MAAO,IAAM+C,EA9CrD,KA8CsE,EAAK,EAAI,EAAIA,EA9CnF,KA8CoG,EAAK,EAAI,IAD1F,IAEIjB,GAAI,CAACC,QAAS,QAASG,MAAO,OAAQD,OAAQ,SAC9CgB,IAAG,OAAErB,QAAF,IAAEA,OAAF,EAAEA,EAAMsB,MAAOC,QAAQ,WAG9B,UAAC,KAAD,CAA4BC,WAAS,EAArC,WACI,UAAC,KAAD,CAAoBC,UAAU,OAA9B,WACI,SAAC,IAAD,CAAcvB,GAAI,CAACwB,YAAa,WADpC,IACiD1B,EAAK2B,eAEtD,UAAC,KAAD,CAAoBF,UAAU,OAA9B,WACI,SAAC,IAAD,CACIvB,GAAI,CAACwB,YAAa,WAF1B,IAEuC1B,EAAK4B,sBApBpD,OACS5B,QADT,IACSA,OADT,EACSA,EAAM5B,aATZyC,OAuCvB,0BACI,SAAC,IAAD,CACIX,GAAI,CAACC,QAAS,QACdxB,IAAKA,EACLyC,QAAS,kBAAMjC,KACf0C,UAAW/B,GAAeD,c,iXC7GlD,IAAMiC,EAAc,IAAIC,IASlBC,EAA+C,IAAIC,QACrDC,EAAS,EAETC,OAAwCzC,EA6BtC,SAAU0C,EAAYC,GACnBC,OAAAA,OAAOC,KAAKF,GAChBG,OACAC,QAAO,SAACC,GAAD,YAA0BhD,IAAjB2C,EAAQK,MACxB/B,KAAI,SAAC+B,GACJ,OAAUA,EACRA,KAAQ,SAARA,GAnBWC,EAmBgBN,EAAQM,OAjBrCX,EAAQY,IAAID,KAChBT,GAAU,EACVF,EAAQa,IAAIF,EAAMT,EAAOY,aAFKd,EAAQe,IAAIJ,IADxB,IAkB+BN,EAAQK,IAnB3D,IAAmBC,KAsBdG,WA4DW,SAAAE,EACdC,EACAC,EACAb,EACAc,GAGE,QAH+B,IADjCd,IAAAA,EAAoC,SACH,IAAjCc,IAAAA,EAAiBhB,GAGwB,qBAAhCiB,OAAOC,2BACK3D,IAAnByD,EACA,CACA,IAAMG,EAASL,EAAQM,wBAWvB,OAVAL,EAASC,EAAgB,CACvBK,eAAgBL,EAChBM,OAAQR,EACRS,kBAC+B,kBAAtBrB,EAAQsB,UAAyBtB,EAAQsB,UAAY,EAC9DC,KAAM,EACNC,mBAAoBP,EACpBQ,iBAAkBR,EAClBS,WAAYT,IAEP,aAK0BU,IAAAA,EAnFrC,SAAwB3B,GAEtB,IAAIpC,EAAKmC,EAAYC,GACjB4B,EAAWnC,EAAYiB,IAAI9C,GAE3B,IAACgE,EAAU,CAEb,IACIC,EADEC,EAAW,IAAIpC,IAGfqC,EAAW,IAAIf,sBAAqB,SAACgB,GACzCA,EAAQC,SAAQ,SAACC,GAAS,MAGlB3F,EACJ2F,EAAMf,gBACNU,EAAWM,MAAK,SAACb,GAAD,OAAeY,EAAMb,mBAAqBC,KAGxDtB,EAAQoC,iBAA8C,qBAApBF,EAAMG,YAG1CH,EAAMG,UAAY9F,GAGpBuF,OAAA,EAAAA,EAASpB,IAAIwB,EAAMd,UAAnBU,EAA4BG,SAAQ,SAACpB,GACnCA,EAAStE,EAAQ2F,WAGpBlC,GAGH6B,EACEE,EAASF,aACRS,MAAMC,QAAQvC,EAAQsB,WACnBtB,EAAQsB,UACR,CAACtB,EAAQsB,WAAa,IAE5BM,EAAW,CACThE,GAAAA,EACAmE,SAAAA,EACAD,SAAAA,GAGFrC,EAAYe,IAAI5C,EAAIgE,GAGtB,OAAOA,EAoC4BD,CAAe3B,GAA1CpC,EAAR,EAAQA,GAAImE,EAAZ,EAAYA,SAAUD,EAAtB,EAAsBA,SAGlBU,EAAYV,EAASpB,IAAIE,IAAY,GAQlC,OAPFkB,EAASvB,IAAIK,IAChBkB,EAAStB,IAAII,EAAS4B,GAGxBA,EAAUC,KAAK5B,GACfkB,EAASpB,QAAQC,GAEV,WAEL4B,EAAUE,OAAOF,EAAUG,QAAQ9B,GAAW,GAErB,IAArB2B,EAAUtF,SAEZ4E,EAAQ,OAAQlB,GAChBmB,EAASa,UAAUhC,IAGC,IAAlBkB,EAAS9F,OAEX+F,EAASc,aACTpD,EAAW,OAAQ7B,K,mJCzJzB,SAASkF,EACPC,GAEA,MAAiC,oBAAnBA,EAAMC,SAoDMC,EAAAA,UC7BtB,SAAU5G,EAWW6G,GAAA,iBAAF,GAAE,EAVzB5B,EAUyB,EAVzBA,UACA6B,EASyB,EATzBA,MACAf,EAQyB,EARzBA,gBACAgB,EAOyB,EAPzBA,WACA9C,EAMyB,EANzBA,KACA+C,EAKyB,EALzBA,YACAC,EAIyB,EAJzBA,KACAC,EAGyB,EAHzBA,cACAzC,EAEyB,EAFzBA,eACA0C,EACyB,EADzBA,SAEMZ,EAAYK,EAAAA,SACZpC,EAAWoC,EAAAA,SACSA,EAAAA,EAAAA,SAAsB,CAC9C1G,SAAUgH,IADLE,EAAP,KAAcC,EAAd,KAIA7C,EAAS8C,QAAUH,EAEbI,IAAAA,EAASX,EAAAA,aACb,SAACY,QAC2BxG,IAAtBuF,EAAUe,UACZf,EAAUe,UACVf,EAAUe,aAAUtG,GAIlBiG,GAEAO,IACFjB,EAAUe,QAAUhD,EAClBkD,GACA,SAACtH,EAAQ2F,GACPwB,EAAS,CAAEnH,OAAAA,EAAQ2F,MAAAA,IACfrB,EAAS8C,SAAS9C,EAAS8C,QAAQpH,EAAQ2F,GAE3CA,EAAMf,gBAAkBkC,GAAeT,EAAUe,UAEnDf,EAAUe,UACVf,EAAUe,aAAUtG,KAGxB,CACEiD,KAAAA,EACA8C,WAAAA,EACA9B,UAAAA,EAEAc,gBAAAA,EAEAe,MAAAA,GAEFrC,MAOJ,CAEAwB,MAAMC,QAAQjB,GAAaA,EAAUb,WAAaa,EAClDhB,EACA8C,EACAC,EACAC,EACAlB,EACAtB,EACAqC,IAKJF,EAAAA,WAAgB,WACTL,EAAUe,UAAWF,EAAMvB,OAAUmB,GAAgBC,GAGxDI,EAAS,CACPnH,SAAUgH,OAKhB,IAAMO,EAAS,CAACF,EAAQH,EAAMlH,OAAQkH,EAAMvB,OAO5C,OAJA4B,EAAOxH,IAAMwH,EAAO,GACpBA,EAAOvH,OAASuH,EAAO,GACvBA,EAAO5B,MAAQ4B,EAAO,GAEfA","sources":["pages/Explore.page.js","../node_modules/src/observe.ts","../node_modules/src/InView.tsx","../node_modules/src/useInView.tsx"],"sourcesContent":["// React\r\nimport {useState, Fragment, useEffect} from \"react\";\r\n\r\n// MUI\r\nimport ImageList from '@mui/material/ImageList';\r\nimport Box from \"@mui/material/Box\";\r\nimport ChatBubbleOutlinedIcon from \"@mui/icons-material/ChatBubbleOutlined\";\r\nimport FavoriteIcon from \"@mui/icons-material/Favorite\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\n// 3d party\r\nimport {useInView} from 'react-intersection-observer'\r\n\r\n// React-Query hooks\r\nimport {usePostExploreListData} from \"../hooks/UseDataControl\";\r\n\r\n// Components\r\nimport {StyledImageTextBox} from \"../components/boxs/Box.styles\";\r\nimport {PostDetailsModal} from \"../components/modalPages/PostDetails.modal.page\";\r\nimport {StyledExploreImageItemList, StyledProfileImageListItem} from \"../components/list/List.styles\";\r\nimport {WindowLoader} from \"../components/layout/icons/Loader\";\r\n\r\n\r\nfunction srcset(image, size, rows = 1, cols = 1) {\r\n    return (\r\n        {\r\n            src: `${image}?w=${size * cols}&h=${size * rows}&fit=crop&auto=format`,\r\n            srcSet: `${image}?w=${size * cols}&h=${size * rows}&fit=crop&auto=format&dpr=2 2x`,\r\n        }\r\n    )\r\n}\r\n\r\nconst Explore = () => {\r\n    // State management\r\n    const {ref, inView} = useInView()\r\n    const [clickedPost, setClickedPost] = useState(null)\r\n    const [postModalOpen, setPostModalOpen] = useState(false)\r\n\r\n    const division = 12\r\n\r\n    useEffect(() => {\r\n        if (inView) fetchNextPage()\r\n    }, [inView])\r\n\r\n    const getNextPageParam = (_lastPage, pages) => pages[(pages.length) - 1].data.next ?? undefined\r\n\r\n    const {data, fetchNextPage, isLoading, isFetching, isFetchingNextPage, hasNextPage}\r\n        = usePostExploreListData(getNextPageParam)\r\n\r\n    const handlePostModalClick = ({post}) => {\r\n        setClickedPost(post?.id)\r\n        setPostModalOpen(!postModalOpen)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {(isLoading || isFetching || isFetchingNextPage) && <WindowLoader/>}\r\n            <Box sx={{display: 'flex', flexDirection: 'column', height: '20ch', width: '125ch', mb: 12}}>\r\n\r\n                <PostDetailsModal\r\n                    open={postModalOpen}\r\n                    handleModalClick={handlePostModalClick}\r\n                    post={clickedPost}\r\n                />\r\n\r\n                {data?.pages.map((group, index) => {\r\n                    return (\r\n                        <Fragment key={index}>\r\n                            <ImageList\r\n                                sx={{width: \"100%\", overflowY: 'unset'}}\r\n                                cols={3}\r\n                                gap={24}\r\n                                variant=\"quilted\"\r\n                            >\r\n                                {group?.data?.results.map((post, i) => (\r\n                                    <StyledExploreImageItemList\r\n                                        key={post?.image}\r\n                                        cols={(i % division === 0) ? 2 : 1}\r\n                                        rows={(i % division === 0) ? 2 : 1}\r\n                                        onClick={() => {\r\n                                            handlePostModalClick({post})\r\n                                        }}\r\n                                    >\r\n                                        <img\r\n                                            {...srcset(post?.image, 121, (i % division === 0) ? 2 : 1, (i % division === 0) ? 2 : 1)}\r\n                                            sx={{display: 'block', width: '100%', height: 'auto%'}}\r\n                                            alt={post?.title} loading=\"lazy\"\r\n                                        />\r\n\r\n                                        <StyledProfileImageListItem container>\r\n                                            <StyledImageTextBox component=\"span\">\r\n                                                <FavoriteIcon sx={{marginRight: '0.5ch'}}/> {post.like_count}\r\n                                            </StyledImageTextBox>\r\n                                            <StyledImageTextBox component=\"span\">\r\n                                                <ChatBubbleOutlinedIcon\r\n                                                    sx={{marginRight: '0.5ch'}}/> {post.comment_count}\r\n                                            </StyledImageTextBox>\r\n                                        </StyledProfileImageListItem>\r\n\r\n\r\n                                    </StyledExploreImageItemList>\r\n                                ))}\r\n                            </ImageList>\r\n                        </Fragment>\r\n                    )\r\n                })}\r\n                <div>\r\n                    <Button\r\n                        sx={{display: 'none'}}\r\n                        ref={ref}\r\n                        onClick={() => fetchNextPage()}\r\n                        disabled={!hasNextPage || isFetchingNextPage}\r\n                    />\r\n                </div>\r\n            </Box>\r\n        </>\r\n    )\r\n        ;\r\n}\r\n\r\n\r\nexport default Explore","import type { ObserverInstanceCallback } from './index';\n\nconst observerMap = new Map<\n  string,\n  {\n    id: string;\n    observer: IntersectionObserver;\n    elements: Map<Element, Array<ObserverInstanceCallback>>;\n  }\n>();\n\nconst RootIds: WeakMap<Element | Document, string> = new WeakMap();\nlet rootId = 0;\n\nlet unsupportedValue: boolean | undefined = undefined;\n\n/**\n * What should be the default behavior if the IntersectionObserver is unsupported?\n * Ideally the polyfill has been loaded, you can have the following happen:\n * - `undefined`: Throw an error\n * - `true` or `false`: Set the `inView` value to this regardless of intersection state\n * **/\nexport function defaultFallbackInView(inView: boolean | undefined) {\n  unsupportedValue = inView;\n}\n\n/**\n * Generate a unique ID for the root element\n * @param root\n */\nfunction getRootId(root: IntersectionObserverInit['root']) {\n  if (!root) return '0';\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n\n/**\n * Convert the options to a string Id, based on the values.\n * Ensures we can reuse the same observer when observing elements with the same options.\n * @param options\n */\nexport function optionsToId(options: IntersectionObserverInit) {\n  return Object.keys(options)\n    .sort()\n    .filter((key) => options[key] !== undefined)\n    .map((key) => {\n      return `${key}_${\n        key === 'root' ? getRootId(options.root) : options[key]\n      }`;\n    })\n    .toString();\n}\n\nfunction createObserver(options: IntersectionObserverInit) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  let id = optionsToId(options);\n  let instance = observerMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    const elements = new Map<Element, Array<ObserverInstanceCallback>>();\n    let thresholds: number[] | readonly number[];\n\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        const inView =\n          entry.isIntersecting &&\n          thresholds.some((threshold) => entry.intersectionRatio >= threshold);\n\n        // @ts-ignore support IntersectionObserver v2\n        if (options.trackVisibility && typeof entry.isVisible === 'undefined') {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        elements.get(entry.target)?.forEach((callback) => {\n          callback(inView, entry);\n        });\n      });\n    }, options);\n\n    // Ensure we have a valid thresholds array. If not, use the threshold from the options\n    thresholds =\n      observer.thresholds ||\n      (Array.isArray(options.threshold)\n        ? options.threshold\n        : [options.threshold || 0]);\n\n    instance = {\n      id,\n      observer,\n      elements,\n    };\n\n    observerMap.set(id, instance);\n  }\n\n  return instance;\n}\n\n/**\n * @param element - DOM Element to observe\n * @param callback - Callback function to trigger when intersection status changes\n * @param options - Intersection Observer options\n * @param fallbackInView - Fallback inView value.\n * @return Function - Cleanup function that should be triggered to unregister the observer\n */\nexport function observe(\n  element: Element,\n  callback: ObserverInstanceCallback,\n  options: IntersectionObserverInit = {},\n  fallbackInView = unsupportedValue,\n) {\n  if (\n    typeof window.IntersectionObserver === 'undefined' &&\n    fallbackInView !== undefined\n  ) {\n    const bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio:\n        typeof options.threshold === 'number' ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds,\n    });\n    return () => {\n      // Nothing to cleanup\n    };\n  }\n  // An observer with the same options can be reused, so lets use this fact\n  const { id, observer, elements } = createObserver(options);\n\n  // Register the callback listener for this element\n  let callbacks = elements.get(element) || [];\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      observerMap.delete(id);\n    }\n  };\n}\n","import * as React from 'react';\nimport type { IntersectionObserverProps, PlainChildrenProps } from './index';\nimport { observe } from './observe';\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\nfunction isPlainChildren(\n  props: IntersectionObserverProps | PlainChildrenProps,\n): props is PlainChildrenProps {\n  return typeof props.children !== 'function';\n}\n\n/**\n ## Render props\n\n To use the `<InView>` component, you pass it a function. It will be called\n whenever the state changes, with the new value of `inView`. In addition to the\n `inView` prop, children also receive a `ref` that should be set on the\n containing DOM element. This is the element that the IntersectionObserver will\n monitor.\n\n If you need it, you can also access the\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\n on `entry`, giving you access to all the details about the current intersection\n state.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView>\n {({ inView, ref, entry }) => (\n      <div ref={ref}>\n        <h2>{`Header inside viewport ${inView}.`}</h2>\n      </div>\n    )}\n </InView>\n );\n\n export default Component;\n ```\n\n ## Plain children\n\n You can pass any element to the `<InView />`, and it will handle creating the\n wrapping DOM element. Add a handler to the `onChange` method, and control the\n state in your own component. Any extra props you add to `<InView>` will be\n passed to the HTML element, allowing you set the `className`, `style`, etc.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\n </InView>\n );\n\n export default Component;\n ```\n */\nexport class InView extends React.Component<\n  IntersectionObserverProps | PlainChildrenProps,\n  State\n> {\n  constructor(props: IntersectionObserverProps | PlainChildrenProps) {\n    super(props);\n    this.state = {\n      inView: !!props.initialInView,\n      entry: undefined,\n    };\n  }\n\n  componentDidUpdate(prevProps: IntersectionObserverProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (\n      prevProps.rootMargin !== this.props.rootMargin ||\n      prevProps.root !== this.props.root ||\n      prevProps.threshold !== this.props.threshold ||\n      prevProps.skip !== this.props.skip ||\n      prevProps.trackVisibility !== this.props.trackVisibility ||\n      prevProps.delay !== this.props.delay\n    ) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unobserve();\n    this.node = null;\n  }\n\n  node: Element | null = null;\n  _unobserveCb: (() => void) | null = null;\n\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const {\n      threshold,\n      root,\n      rootMargin,\n      trackVisibility,\n      delay,\n      fallbackInView,\n    } = this.props;\n\n    this._unobserveCb = observe(\n      this.node,\n      this.handleChange,\n      {\n        threshold,\n        root,\n        rootMargin,\n        // @ts-ignore\n        trackVisibility,\n        // @ts-ignore\n        delay,\n      },\n      fallbackInView,\n    );\n  }\n\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n      this._unobserveCb = null;\n    }\n  }\n\n  handleNode = (node?: Element | null) => {\n    if (this.node) {\n      // Clear the old observer, before we start observing a new element\n      this.unobserve();\n\n      if (!node && !this.props.triggerOnce && !this.props.skip) {\n        // Reset the state if we get a new node, and we aren't ignoring updates\n        this.setState({ inView: !!this.props.initialInView, entry: undefined });\n      }\n    }\n\n    this.node = node ? node : null;\n    this.observeNode();\n  };\n\n  handleChange = (inView: boolean, entry: IntersectionObserverEntry) => {\n    if (inView && this.props.triggerOnce) {\n      // If `triggerOnce` is true, we should stop observing the element.\n      this.unobserve();\n    }\n    if (!isPlainChildren(this.props)) {\n      // Store the current State, so we can pass it to the children in the next render update\n      // There's no reason to update the state for plain children, since it's not used in the rendering.\n      this.setState({ inView, entry });\n    }\n    if (this.props.onChange) {\n      // If the user is actively listening for onChange, always trigger it\n      this.props.onChange(inView, entry);\n    }\n  };\n\n  render() {\n    if (!isPlainChildren(this.props)) {\n      const { inView, entry } = this.state;\n      return this.props.children({ inView, entry, ref: this.handleNode });\n    }\n\n    const {\n      children,\n      as,\n      triggerOnce,\n      threshold,\n      root,\n      rootMargin,\n      onChange,\n      skip,\n      trackVisibility,\n      delay,\n      initialInView,\n      fallbackInView,\n      ...props\n    } = this.props;\n\n    return React.createElement(\n      as || 'div',\n      { ref: this.handleNode, ...props },\n      children,\n    );\n  }\n}\n","import * as React from 'react';\nimport type { InViewHookResponse, IntersectionOptions } from './index';\nimport { observe } from './observe';\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\n/**\n * React Hooks make it easy to monitor the `inView` state of your components. Call\n * the `useInView` hook with the (optional) [options](#options) you need. It will\n * return an array containing a `ref`, the `inView` status and the current\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\n * report the status.\n *\n * @example\n * ```jsx\n * import React from 'react';\n * import { useInView } from 'react-intersection-observer';\n *\n * const Component = () => {\n *   const { ref, inView, entry } = useInView({\n *       threshold: 0,\n *   });\n *\n *   return (\n *     <div ref={ref}>\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\n *     </div>\n *   );\n * };\n * ```\n */\nexport function useInView({\n  threshold,\n  delay,\n  trackVisibility,\n  rootMargin,\n  root,\n  triggerOnce,\n  skip,\n  initialInView,\n  fallbackInView,\n  onChange,\n}: IntersectionOptions = {}): InViewHookResponse {\n  const unobserve = React.useRef<Function>();\n  const callback = React.useRef<IntersectionOptions['onChange']>();\n  const [state, setState] = React.useState<State>({\n    inView: !!initialInView,\n  });\n  // Store the onChange callback in a `ref`, so we can access the latest instance inside the `useCallback`.\n  callback.current = onChange;\n\n  const setRef = React.useCallback(\n    (node: Element | null) => {\n      if (unobserve.current !== undefined) {\n        unobserve.current();\n        unobserve.current = undefined;\n      }\n\n      // Skip creating the observer\n      if (skip) return;\n\n      if (node) {\n        unobserve.current = observe(\n          node,\n          (inView, entry) => {\n            setState({ inView, entry });\n            if (callback.current) callback.current(inView, entry);\n\n            if (entry.isIntersecting && triggerOnce && unobserve.current) {\n              // If it should only trigger once, unobserve the element after it's inView\n              unobserve.current();\n              unobserve.current = undefined;\n            }\n          },\n          {\n            root,\n            rootMargin,\n            threshold,\n            // @ts-ignore\n            trackVisibility,\n            // @ts-ignore\n            delay,\n          },\n          fallbackInView,\n        );\n      }\n    },\n    // We break the rule here, because we aren't including the actual `threshold` variable\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      // If the threshold is an array, convert it to a string so it won't change between renders.\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      Array.isArray(threshold) ? threshold.toString() : threshold,\n      root,\n      rootMargin,\n      triggerOnce,\n      skip,\n      trackVisibility,\n      fallbackInView,\n      delay,\n    ],\n  );\n\n  /* eslint-disable-next-line */\n  React.useEffect(() => {\n    if (!unobserve.current && state.entry && !triggerOnce && !skip) {\n      // If we don't have a ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n      // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n      setState({\n        inView: !!initialInView,\n      });\n    }\n  });\n\n  const result = [setRef, state.inView, state.entry] as InViewHookResponse;\n\n  // Support object destructuring, by adding the specific values.\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n\n  return result;\n}\n"],"names":["srcset","image","size","rows","cols","src","srcSet","useInView","ref","inView","useState","clickedPost","setClickedPost","postModalOpen","setPostModalOpen","useEffect","fetchNextPage","usePostExploreListData","_lastPage","pages","length","data","next","undefined","isLoading","isFetching","isFetchingNextPage","hasNextPage","handlePostModalClick","post","id","sx","display","flexDirection","height","width","mb","P","open","handleModalClick","map","group","index","Fragment","overflowY","gap","variant","results","i","onClick","alt","title","loading","container","component","marginRight","like_count","comment_count","disabled","observerMap","Map","RootIds","WeakMap","rootId","unsupportedValue","optionsToId","options","Object","keys","sort","filter","key","root","has","set","toString","get","observe","element","callback","fallbackInView","window","IntersectionObserver","bounds","getBoundingClientRect","isIntersecting","target","intersectionRatio","threshold","time","boundingClientRect","intersectionRect","rootBounds","createObserver","instance","thresholds","elements","observer","entries","forEach","entry","some","trackVisibility","isVisible","Array","isArray","callbacks","push","splice","indexOf","unobserve","disconnect","isPlainChildren","props","children","React","_temp","delay","rootMargin","triggerOnce","skip","initialInView","onChange","state","setState","current","setRef","node","result"],"sourceRoot":""}